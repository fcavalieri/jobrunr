plugins {
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'org.sonarqube' version '3.2.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'signing'
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

configure(subprojects.findAll {it.name != 'platform'}) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    group = 'org.jobrunr'
    version = System.getenv('DRONE_TAG') ?: "v1.0.0-SNAPSHOT"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }


    dependencies {
        implementation platform(project(':platform'))

        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.awaitility:awaitility'
        testImplementation 'org.assertj:assertj-core'
        testImplementation 'com.tngtech.archunit:archunit-junit5'
        testImplementation 'net.javacrumbs.json-unit:json-unit-assertj'
        testImplementation 'ch.qos.logback:logback-classic'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.mockito:mockito-junit-jupiter'
    }

    test {
        reports.junitXml.destination = file("/tmp/reports/$project.name")
        reports.html.destination = file("/tmp/reports/$project.name")

        useJUnitPlatform()
        testLogging {
            minGranularity = 3
            events "passed", "skipped", "failed"
        }
    }

    jacoco {
        toolVersion = "0.8.7"
    }
    tasks['jacocoTestReport'].dependsOn test
    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    sonarqube {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.projectKey", "jobrunr_jobrunr"
            property "sonar.organization", "jobrunr"
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

