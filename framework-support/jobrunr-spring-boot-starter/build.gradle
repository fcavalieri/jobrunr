plugins {
    id 'java-library'
    id 'maven-publish'
}

dependencies {
    api platform(project(':platform'))
    api platform('org.springframework.boot:spring-boot-dependencies:2.5.4')
    annotationProcessor platform('org.springframework.boot:spring-boot-dependencies:2.5.4')
    api project(':core')

    api 'org.springframework.boot:spring-boot-starter'
    api 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    compileOnly 'io.micrometer:micrometer-core'
    compileOnly 'com.fasterxml.jackson.core:jackson-databind'
    compileOnly 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compileOnly 'com.google.code.gson:gson'
    compileOnly 'org.eclipse:yasson'

    compileOnly 'redis.clients:jedis'
    compileOnly 'io.lettuce:lettuce-core'
    compileOnly 'org.mongodb:mongodb-driver-sync'
    compileOnly 'org.elasticsearch.client:elasticsearch-rest-high-level-client'
    compileOnly 'com.marklogic:marklogic-client-api'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation 'com.google.code.gson:gson'
    testImplementation 'redis.clients:jedis'
    testImplementation 'io.lettuce:lettuce-core'
    testImplementation 'org.mongodb:mongodb-driver-sync'
    testImplementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client'
    testImplementation 'io.micrometer:micrometer-core'
    testImplementation 'com.marklogic:marklogic-client-api'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.jobrunr'
            artifactId = 'jobrunr-spring-boot-starter'
            version = project.version.replace("v", "")
            from components.java

            pom {
                name = 'JobRunr Spring Boot Starter'
                description = 'An easy way to perform background processing on the JVM. Backed by persistent storage. Open and free for commercial use.'
                url = 'https://github.com/jobrunr/jobrunr'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0 or later'
                        url = 'https://github.com/jobrunr/jobrunr/blob/master/License.md#lgpl-v3-license'
                    }
                    license {
                        name = 'Commercial License'
                        url = 'https://github.com/jobrunr/jobrunr/blob/master/License.md#commercial-license'
                    }
                }
                developers {
                    developer {
                        id = 'rdehuyss'
                        name = 'Ronald Dehuysser'
                        email = 'ronald.dehuysser@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jobrunr/jobrunr.git'
                    developerConnection = 'scm:git@github.com:jobrunr/jobrunr.git'
                    url = 'https://github.com/jobrunr/jobrunr.git'
                }

                versionMapping {
                    usage('java-runtime'){
                        fromResolutionResult()
                    }
                }

                withXml {
                    def pomNode = asNode()
                    pomNode.remove(pomNode.dependencyManagement)
                    pomNode.dependencies.'*'.findAll() {
                        it.optional.text() == 'true'
                    }.each() {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/26366632/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = System.getenv("PRIVATE_TOKEN") != null ? "Private-Token" : "Job-Token"
                value = System.getenv("PRIVATE_TOKEN") != null ? System.getenv("PRIVATE_TOKEN") : System.getenv("CI_JOB_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}
